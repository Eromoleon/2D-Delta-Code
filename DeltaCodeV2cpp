/*
Delta robot arduino control code
2018-03-19
*/

#include <Arduino.h>
#include <cppQueue.h>
#include <Wire.h>
#include <Servo.h>

// ##############################
// Global constants::



// ..geometry:
#define TCP_OFFSET 25
#define START_ANGLE_LEFT 90
#define START_ANGLE_RIGHT 90
#define SERVO_OFFSET 55
#define Y_MAX 145 // Intersection point maximum
#define Y_MIN 50 // not necessary
#define X_BOUNDARY 130

#define SAFE_MODE_Y_CONVEYOR 138
#define SAFE_MODE_Y_WHEELS 150
#define SAFE_MODE_X_WHEELS 45
#define PICK_HEIGHT 162
const double  dist = 50; // distance between the two motors
const double  l1 = 70;  // length of the base arms (between a motor and a forearm)
const double  l2 = 140; // length of the forearms (that connect with the endeffector)

// Pins:
#define SERVO_PIN_CONT 3
#define SERVO_PIN_LEFT 6
#define SERVO_PIN_RIGHT 5
#define MAGNET_PIN 2
#define IR_PIN 13

// ..other:
#define PICKUP_DELAY 5000
#define CONVEYOR_SPEED 2
#define COMMAND_LENGTH 10
#define FIFO_SIZE 20
//TODO: otpimize:
#define ANGLE_MOVEMENT_TIME 8 // How many milliseconds we estimate for one degree rotation

// ##############################
// Typedefs:

struct Command  {
  int determinant;
  int data[COMMAND_LENGTH];
};

struct Point{
  double  x;
  double  y;
};

class Circle{
  public:
    Circle(double , double , double );
    bool isInside(Point p);
    double  x;
    double  y;
    double  r;
};

Circle::Circle(double xC, double yC, double rV){
  x = xC;
  y = yC;
  r = rV;
}

bool Circle::isInside(Point p){
  return ((pow( p.x-x , 2 ) + pow( p.y-y, 2 )) < pow(r,2));
}

struct MotorAngles{
  double  theta1;
  double  theta2;
};

// Global declarations (Servo pointers):
Servo servoL;
Servo servoR;
Servo servoC;

class Actuators{
	public:
		Actuators(Servo* servL, Servo* servR, Servo* servC, int magnetP);
		bool taskMgr(Command c);
		bool pickAndP(int xCoord = 0, int color = 0);
		bool moveJ(float thetaL, float thetaR);
		bool calibration();
		bool setMagnet(bool status);
		bool inverseK(float xCoord, float yCoord);
		bool directK(int thetaL, int thetaR);
        Point directKin(float thL, float thR, bool &outOfRange);
		Point * intersection(Circle c1, Circle c2, bool & outOfRange);
		MotorAngles inverse(Point p, bool &outOfRange);
        bool isInSafetyRange(Point p);

	private:
	// TODO 4 points that constrain the work area
		Servo*  motorL;
		Servo*  motorR;
        Servo*  motorC;
		int magnetPin;
		bool outOfReach;
		float angleR = 0;
		float angleL = 0;
        Circle clu = Circle(-82,-40,150);
        Circle cl0 = Circle(-25,0,200);

        Circle cru = Circle(82,-40,150);
        Circle cr0 = Circle(25,0,200);
        double currentX = 0;
        double currentY = 0;
        double currentThL = 0;
        double currentThR = 0;

};

// Functions:
bool taskMgr(Command c);
void(* resetFunc) (void) = 0;//declare reset function at address 0
// Global variables:

Queue commandQ(sizeof(Command), FIFO_SIZE, FIFO);
int magnetP = MAGNET_PIN;
MotorAngles angles;
Actuators actuators(&servoL, &servoR, &servoC, magnetP);
bool outOfRange = false;
String inputString = "";         // a String to hold incoming data



void setup() {
    Serial.begin(115200);
    pinMode(MAGNET_PIN, OUTPUT);
    pinMode(IR_PIN, INPUT_PULLUP);

    servoC.attach(SERVO_PIN_CONT);
    servoL.attach(SERVO_PIN_LEFT);
    servoR.attach(SERVO_PIN_RIGHT);
	// initialize serial:

    // Serial.println("Entering setup");
	// reserve 200 bytes for the inputString:
	inputString.reserve(200);
    actuators.calibration();
    // DEBUG:
	// Calibration:<



} // __End setup__

void loop() {

  if(commandQ.isEmpty())
  {
    //Serial.println("Command queue empty, waiting for command...");
    delay(50);
  }
  else{

    Command c;
    commandQ.pop(&c);
    //Serial.println("Command type: ");
    //Serial.println(c.determinant);
	actuators.taskMgr(c);
  }

    delay(10);
}
// __End loop__

void serialEvent() {
    //Command structure: Number;Number;Number\n

    /*
      SerialEvent occurs whenever a new data comes in the hardware serial RX. This
      routine is run between each time loop() runs, so using delay inside loop can
      delay response. Multiple bytes of data may be available.
    */

    while (Serial.available()) {
        // get the new byte:
        //String inString = "";

        char inChar = (char)Serial.read();
        inputString += inChar;

        if ( inChar == '\n' ) {
            int nCount = 0;
            Command c;

            for( int j = 0; j<COMMAND_LENGTH; j++ ){
            c.data[j] = 0; // Initialize the command array
            }
            String numString = "";
            for( size_t i = 0; i<inputString.length(); i++ ) {
                char ch = (char)inputString[i];
                long int number = 0;

                if(ch!=';'&& ch!='\n') {
                	numString+=ch ;
                }
                else {
                	number = numString.toInt();
                	c.data[nCount] = (int)number;
                	nCount++;
                	numString = "";
                }
            }


            c.determinant = c.data[0] ;
            commandQ.push(&c);
            //Serial.println("Message inserted into the Queue  \n");
            inputString = "";

            } // End if( ?"\n")
    }
}

bool Actuators::pickAndP(int xCoord, int color){
	int yCoord = PICK_HEIGHT;
    inverseK(xCoord, yCoord);
    motorC->write(90-CONVEYOR_SPEED);
    delay(100);
    while(digitalRead(IR_PIN)==1){
        delay(10);
    }
    while(digitalRead(IR_PIN) == 0){
        delay(10);
    }
    Serial.println("Object detected!");

    setMagnet(true);
    delay(PICKUP_DELAY);
    motorC->write(90);
    delay(200);
    inverseK(xCoord, yCoord+4);
    delay(500);
    inverseK(xCoord, yCoord -30);
    if (color == 0){
        inverseK(-95,140);
        delay(200);
        inverseK(-95,155);
        setMagnet(false);
        inverseK(-95,140);
        inverseK(-95,155);
    }
    else if(color == 1){
        inverseK(95,140);
        delay(200);
        inverseK(95,155);
        setMagnet(false);
        inverseK(95,140);
        inverseK(95,155);
    }
    else{
        setMagnet(false);
        motorC->write(90-20);
        delay(1000);
        motorC->write(90);
        delay(100);
    }
    directK(90,90);
    delay(500);
	Serial.println("1");
  return true;
}


bool Actuators::inverseK(float xCoord, float yCoord){
    //Serial.print("x: ");
    //Serial.println(xCoord);

    //Serial.print("y: ");
    //Serial.println(yCoord);

    outOfRange = false;
	MotorAngles angles;
	Point p;
	p.x = xCoord;
	p.y = yCoord;
	angles = inverse(p, outOfRange);
	//Serial.print("theta1: ");Serial.println(angles.theta1);
	//Serial.print("theta2: ");Serial.println(angles.theta2);
	if(outOfRange == false){
		moveJ(angles.theta1, angles.theta2);
        return true;
	}
    else return false;
}

bool Actuators::taskMgr(Command c){
	 switch(c.determinant){
		case 0:
			pickAndP(c.data[1], c.data[2]);
			break;

        case 1:
			directK(c.data[1], c.data[2]);
			break;
		case 2:
			inverseK(c.data[1], c.data[2]);
			break;
		case 3:
			calibration();
			break;
        case 4:
            resetFunc();
            break;
		default:
			Serial.println("-2");

			break;
    }
    if(c.data[3] == 1){
        //Serial.println("magnet on");
        setMagnet(true);
    }
    else{
        //Serial.println("magnet off");
        setMagnet(false);
    }
    if(c.determinant!=0){
        if(c.data[4] == 1){
            // Forward
            motorC->write(90-CONVEYOR_SPEED);
        }
        else if(c.data[4] == 0){
            // OFF
            motorC->write(90);
        }
    }
    //Serial.println("#########################################################");
    return true;
}



Actuators::Actuators(Servo *servL, Servo *servR, Servo *servC, int magnetP){
	motorL = servL;
	motorR = servR;
    motorC = servC;
    motorC->write(90); // Otherwise it would start moving
	magnetPin = magnetP;
}


Point Actuators::directKin(float thL, float thR, bool & outOfRange){
    outOfRange = false;
    Point p;
    double thLRad = (double)thL/180*M_PI;
    double thRRad = (double)thR/180*M_PI;
    double dhalf = (double)dist / 2;
    double x1L = -l1 * sin(thLRad) - dhalf;
    double y1L = l1 * cos(thLRad);
    double x1R = l1 * sin(thRRad) + dhalf;
    double y1R = l1 * cos(thRRad);


    Circle cBaseL(x1L,y1L,l2);
    Circle cBaseR(x1R,y1R,l2);

    Point * intersect_points;
    intersect_points = intersection(cBaseL, cBaseR,outOfRange);

    if(intersect_points[0].y > intersect_points[1].y){
        p.x = round(intersect_points[0].x);
        p.y = round(intersect_points[0].y) + TCP_OFFSET;
    }else{
        p.x = round(intersect_points[1].x);
        p.y = round(intersect_points[1].y) + TCP_OFFSET;
    }
    //Serial.println("Direct kinematics:");
    //Serial.print("x: ");
    //Serial.println(p.x);
    //Serial.print("y: ");
    //Serial.println(p.y);
    free(intersect_points);
    return p;


}

bool Actuators::moveJ(float thetaL, float thetaR){
    bool outOfRange = false;
    int thetaMin = -SERVO_OFFSET;
    int thetaMax = 180-SERVO_OFFSET;


    Point checkPoint = directKin(thetaL, thetaR,outOfRange);
    checkPoint.y = checkPoint.y - TCP_OFFSET;
    outOfRange = !isInSafetyRange(checkPoint);

    if (thetaL>thetaMax || thetaL<thetaMin){
        //Serial.println("ThetaL cant be reached by the servo");
        outOfRange = true;
    }
    else if (thetaR>thetaMax || thetaR<thetaMin){
        //Serial.println("ThetaR cant be reached by the servo");
        outOfRange = true;
    }

    if(outOfRange == true){
        //Serial.println("Out of range!");
        Serial.println("-1");
        return false;
    }
    else{
        float thetaSL = 180-SERVO_OFFSET-thetaL;
        float thetaSR = SERVO_OFFSET+thetaR;
        float delta_thL = abs(currentThL-thetaSL); // for calculating delay for servoL
        float delta_thR = abs(currentThR-thetaSR); // for calculating delay for servoR
        // Safe mode:
        bool safeMove = false;
        safeMove = (checkPoint.y + TCP_OFFSET > SAFE_MODE_Y_CONVEYOR || currentY + TCP_OFFSET > SAFE_MODE_Y_CONVEYOR )&& (checkPoint.x)*currentX < 0;
        if( safeMove == false){
            if (checkPoint.y + TCP_OFFSET > SAFE_MODE_Y_WHEELS && (abs(checkPoint.x)>SAFE_MODE_X_WHEELS||abs(currentX)>SAFE_MODE_X_WHEELS)){
                safeMove = true;
            }
        }
        if( safeMove ){ // change of sign at a low position
            if(checkPoint.x < currentX){
                //Serial.println("Moving Left first");
                motorL->write(int(thetaSL));
                delay(ANGLE_MOVEMENT_TIME*delta_thL); // delay proportional with angles to move
                motorR->write(int(thetaSR));
                delay(ANGLE_MOVEMENT_TIME*delta_thR); // delay proportional with angles to move
            }
            else{
                //Serial.println("Moving Right first");
                motorR->write(int(thetaSR));
                delay(ANGLE_MOVEMENT_TIME*delta_thR); // delay proportional with angles to move
                motorL->write(int(thetaSL));
                delay(ANGLE_MOVEMENT_TIME*delta_thL); // delay proportional with angles to move
            }
        }
        else{
        motorL->write(int(thetaSL));
        motorR->write(int(thetaSR));
        float greaterDelta = max(delta_thL, delta_thR);
        delay(greaterDelta*ANGLE_MOVEMENT_TIME);
        }
        currentX = checkPoint.x;
        currentY = checkPoint.y;
        currentThL = thetaSL;
        currentThR = thetaSR;
        Serial.println("1");
    	return true;

    }

}

bool Actuators::calibration(){
	//Serial.println("Calibrating...");
	angleL = START_ANGLE_LEFT;
	angleR = START_ANGLE_RIGHT;
    moveJ(angleL, angleR);
    delay(1000); // make sure it gets to start position from any start position.
	//Serial.println("Calibration done!");
    return true;
}

bool Actuators::setMagnet(bool status){
    if(status == true){
        digitalWrite(magnetPin, HIGH);
    }
    else digitalWrite(magnetPin, LOW);
    return true;
}

bool Actuators::directK(int thetaL, int thetaR){
    moveJ(thetaL, thetaR);
    return true;
}

Point * Actuators::intersection(Circle c1, Circle c2, bool & outOfRange){
	outOfRange = false;
	Point * outputPoints = (Point*)malloc(2*sizeof(Point)); // allocate memory for the outpoints[] array that we will return
	double  x1 = c1.x;
	double  y1 = c1.y;
	double  r1 = c1.r;
	double  x2 = c2.x;
	double  y2 = c2.y;
	double  r2 = c2.r;
	// P1, P2: center points, I1, I2: intersection points
	// L: line connecting the center points
	double  d = sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
	if (!(abs(r1 - r2) <= d && d <= r1 + r2)) { // no intersection
		outputPoints[0].x = -1;
		outputPoints[0].y = -1;
		outputPoints[1].x = -1;
		outputPoints[1].y = -1;
		outOfRange = true;
		return outputPoints;

	// empty list of results
	}
	 // intersection(s) should exist
	double  a = (r1*r1-r2*r2+d*d)/(2*d); // length of the orthogonal projection of P1_I1 vector to L (as well as P1I2 to L)
	double  h = sqrt(r1*r1-a*a); // length of the orthogonal complement of P1_I1 vector to L
	double  xc = x1+(a/d)*(x2-x1); // Endpoint x of the orthogonal projection of P1_I1 vector to L
	double  yc = y1+(a/d)*(y2-y1); // Endpoint y of the orthogonal projection of P1_I1 vector to L
	// I1, I2:
	double  xi1 = xc + (h/d)*(y2-y1); // x coordinate of the first intersection point
	double  yi1 = yc - (h/d)*(x2-x1); // y coordinate of the first intersection point

	double  xi2 = xc - (h/d)*(y2-y1); // y coordinate of the second intersection point
	double  yi2 = yc + (h/d)*(x2-x1); // y coordinate of the second intersection point

	if (yi1 > yi2){
		// fills the outpoints[] array with the calculated intersections
		// (we have two intersection points, outputpoints[0] and outputPoints[1])
		outputPoints[0].x = xi1;
		outputPoints[0].y = yi1;
		outputPoints[1].x = xi2;
		outputPoints[1].y = yi2;
	}
	else{
		outputPoints[1].x = xi1;
		outputPoints[1].y = yi1;
		outputPoints[0].x = xi2;
		outputPoints[0].y = yi2;
	}
	// outputPoints [0] will have the greater y coordinate
	return outputPoints;
}

bool Actuators::isInSafetyRange(Point p2){

    if (p2.y<Y_MAX && p2.y>Y_MIN && abs(p2.x)<X_BOUNDARY){
        if(p2.x < 0){
            return ((!clu.isInside(p2)) && cr0.isInside(p2));
        }
        else{
            return ((!cru.isInside(p2)) && cl0.isInside(p2));
        }
    }
    else return false;
}

MotorAngles Actuators::inverse(Point p, bool &outOfRange){
	MotorAngles motorAngles; // This will store the results of the calculation (theta1, theta2)
    p.y = p.y-TCP_OFFSET; // TCP -> Intersection point

    // From here on we only calculate the intersection point NOT the TCP
	motorAngles.theta1 = angleL;
	motorAngles.theta2 = angleR;

	Circle cBaseL((-1)*dist/2, 0, l1 ); // Left base circle: center is the left motor axis, radius is l1
    Circle cBaseR(dist/2,0,l1); // Right base circle: center is the right motor axis, radius is l1
    Circle cEnd(p.x, p.y,l2);


    if(!isInSafetyRange(p)){
        outOfRange = true;
        //Serial.println("isInSafetyRange found position to be out of range.");
    }


	Point * intersect_pointsL;
    // find intersections between the left base circle and the end effector circle:
	intersect_pointsL = intersection(cBaseL, cEnd, outOfRange); // this finds the two possible positions of the left "elbow"
	// select the desired position out of the two possibilities:
	Point LeftArm;
	if(intersect_pointsL[0].x < intersect_pointsL[1].x){
		LeftArm = intersect_pointsL[0];
	}
	else{
		LeftArm = intersect_pointsL[1];
	}


	// find intersections between the right base circle and the end effector circle:
	Point * intersect_pointsR;
	intersect_pointsR = intersection(cBaseR, cEnd, outOfRange); // this finds the two possible positions of the right "elbow"
	// select the desired position out of the two possibilities:
	Point RightArm;
	if(intersect_pointsR[0].x > intersect_pointsR[1].x){
		RightArm = intersect_pointsR[0];
	}
	else{
		RightArm = intersect_pointsR[1];
	}
	// The intersection function sets outOfRange to true if the two circles do not touch
	if(outOfRange == true){ // we selected a point that is out of the work area
		// Set the angles to a safe value
		//Serial.println("out of Range!");

	}
	else{ // The position is in the work area, so we calcualte the theta angles with atan2(x_elbow,y_elbow)

	       // we ahve two sides of a triangle, we find the angle between the two sides:
	   motorAngles.theta1 = -(180/M_PI)*atan2(LeftArm.x+dist/2, LeftArm.y);
	      // we ahve two sides of a triangle, we find the angle between the two sides:
	   motorAngles.theta2 = (180/M_PI)*atan2(RightArm.x-dist/2 , RightArm.y);

	}
	// Free dinamically allocated memory
	free(intersect_pointsL);
	free(intersect_pointsR);
	return motorAngles;
}
